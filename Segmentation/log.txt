(splatting) jpark@jpark:~/project/ultralytics$ python demo.py
======= Initialize =======

Load data_path: 8 images Success
Load Yolo Model Success

0: 480x640 3 cars, 1 stop sign, 1: 480x640 9 persons, 1 bus, 3 backpacks, 2: 480x640 5 persons, 1 chair, 2 laptops, 3: 480x640 13 bicycles, 1 car, 4: 480x640 10 persons, 1 car, 1 motorcycle, 5: 480x640 2 buss, 6: 480x640 2 benchs, 4 chairs, 7: 480x640 2 persons, 1 car, 1 fire hydrant, 23.9ms
Speed: 1.1ms preprocess, 3.0ms inference, 1.1ms postprocess per image at shape (1, 3, 480, 640)

Segmentation Results: 8 images
orig_shape: (480, 640) --> mask_shape: torch.Size([4, 480, 640])

class_label: ['stop sign', 'car', 'car', 'car']
orig_label: tensor([11.,  2.,  2.,  2.], device='cuda:0')
bin_label: [0, 1, 1, 1]

class_label: ['person', 'person', 'person', 'bus', 'person', 'person', 'person', 'person', 'person', 'backpack', 'person', 'backpack', 'backpack']
orig_label: tensor([ 0.,  0.,  0.,  5.,  0.,  0.,  0.,  0.,  0., 24.,  0., 24., 24.], device='cuda:0')
bin_label: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]

class_label: ['laptop', 'person', 'person', 'person', 'person', 'person', 'laptop', 'chair']
orig_label: tensor([63.,  0.,  0.,  0.,  0.,  0., 63., 56.], device='cuda:0')
bin_label: [0, 1, 1, 1, 1, 1, 0, 0]

dynamic_pred: 8 images   (480, 640)
dynamic_output: 8 list[numpy]   (480, 640), float64, 0.00658203125

======== Complete ========

*******230608 meeting*******
Visual SLAM vs Odometry

ORB SLAM : Tracking, Local Mapping, Loop Closure
VO = Tracking + Local Mapping
Global Mapping : Local Mapping + Loop Closure

Mono Vision : Initialize -> Feature Extracture -> Matching -> 
2d + 2d -> r|t : SFM
2d + 2d + r|t -> 3d : Trianagulation
2d + 3d -> r|t : P3P
Mono = SFM -> Tri -> P3P
Stereo = Tri -> P3P

